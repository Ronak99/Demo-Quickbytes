generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model newsCategory {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  name                String           @unique
  label               String
  relevancy           relevancy
  article_ids         String[]         @db.ObjectId
  articles            article[]        @relation(fields: [article_ids], references: [id])
  user_preferences    userPreferences? @relation(fields: [user_preferences_id], references: [id])
  user_preferences_id String?          @db.ObjectId
}

enum relevancy {
  major
  all
}

model article {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      String
  image        String
  published_on DateTime
  source_url   String
  author       user           @relation(fields: [user_id], references: [id])
  user_id      String         @db.ObjectId
  category_ids String[]       @db.ObjectId
  categories   newsCategory[] @relation(fields: [category_ids], references: [id])
}

model user {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String            @unique
  image            String
  article          article[]
  auth_token       authToken[]
  user_preferences userPreferences[]
}

model authToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String    @db.ObjectId
  created_on  DateTime  @default(now())
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model userPreferences {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  user       user           @relation(fields: [user_id], references: [id])
  updated_on DateTime       @default(now())
  categories newsCategory[]
  user_id    String         @db.ObjectId
}
