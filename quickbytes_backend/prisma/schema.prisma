generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model newsCategory {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String           @unique
  label             String
  relevancy         relevancy
  article_ids       String[]         @db.ObjectId
  articles          article[]        @relation(fields: [article_ids], references: [id])
  userPreferences   userPreferences? @relation(fields: [userPreferencesId], references: [id])
  userPreferencesId String?          @db.ObjectId
}

enum relevancy {
  major
  all
}

model article {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      String
  image        String
  published_on DateTime
  source_url   String
  author       user           @relation(fields: [user_id], references: [id])
  user_id      String         @db.ObjectId
  category_ids String[]       @db.ObjectId
  categories   newsCategory[] @relation(fields: [category_ids], references: [id])
}

model user {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String    @unique
  image   String
  article article[]
  token   token[]
}

model token {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  user        user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  createdOn   DateTime  @default(now())
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model userPreferences {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  userId     String         @db.ObjectId
  updatedOn  DateTime       @default(now())
  categories newsCategory[]
}
